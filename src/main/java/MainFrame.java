
import com.formdev.flatlaf.intellijthemes.FlatDarkFlatIJTheme;

import java.awt.Color;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;

/*
    En la clase MainFrame es en donde se crea la GUI que se le muestra al usuario, en ella se tienen los botones con las acciones que se realizarán a las palabras erróneas, cambiar el método de búsqueda a utilizar, leer un nuevo archivo o terminar la revisión del archivo actual.


 */
public class MainFrame extends javax.swing.JFrame {

    private ReplaceModal replaceModal;
    private SpellCheckerControl spellChecker;
    private String missingWord = "";
    private int currentIndex = 0;
    private int addedWordsCounter = 0;
    private int omittedWordsCounter = 0;
    private int replacedWordsCounter = 0;
    private boolean isFileChosen;

    public MainFrame() {
        spellChecker = new SpellCheckerControl();
        replaceModal = new ReplaceModal(this, true);
        initComponents();
        resetAll();
    }

    public String getMissingWord() {
        return missingWord;
    }

    /**
     * Con este método se realiza la acción de reemplazar la palabra errónea por
     * la que el usuario ingrese.
     * */
    public void replaceWord(String word) {
        String text = textArea.getText();
        text = text.replaceAll(missingWord, word);
        textArea.setText(text);
        spellChecker.addWord(word);
        nextSearch();
        replacedWordsCounter++;
    }

    /**
     * Este método retrocede el índice una palabra, para volver a realizar una
     * acción con ella.
     * */
    public void cancelReplace() {
        currentIndex -= missingWord.length();
    }

    /**
     * Este método es el encargado de remarcar la palabra errónea en el texto.
     * */
    private void highlightWords(String text) throws BadLocationException {
        var highlighter = textArea.getHighlighter();
        var painter = new DefaultHighlighter.DefaultHighlightPainter(Color.decode("#106BC4"));
        int start, end;
        /* se obtiene la palabra errónea */
        missingWord = spellChecker.getNextMissingWord(text.substring(currentIndex));
        /* Se remarca la palabra */
        start = text.indexOf(missingWord);
        end = start + missingWord.length();
        highlighter.addHighlight(start, end, painter);
        /* se muestra la palabra errónea en el Label */
        textLabel.setText(missingWord);
        /* Se actualiza el índice de la siguiente palabra a analizar */
        currentIndex = end;
    }

    /**
     * Este método revisa si la palabra no se encuentra en el diccionario, para
     * remarcarla en el texto.
     * */
    private void nextSearch() {
        textArea.getHighlighter().removeAllHighlights();
        String text = textArea.getText();
        missingWord = "";
        if (!text.equals("")) {
            try {
                isFileChosen = true;
                highlightWords(text);
            } catch (BadLocationException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }

    /**
     * Este método reinicia todas las variables necesarias para volver a realizar
     * la revisión de un nuevo archivo.
     * */
    private void resetAll() {
        textArea.getHighlighter().removeAllHighlights();
        textArea.setText("");
        textLabel.setText("");
        wordLabel.setVisible(isFileChosen);
        missingWord = "";
        currentIndex = 0;
        addedWordsCounter = 0;
        omittedWordsCounter = 0;
        replacedWordsCounter = 0;
        spellChecker.resetOmittedWords();
        isFileChosen = false;
        updateOptionsVisibility();
    }

    /**
     * Este método se utiliza para mostrar y esconder los botones de opciones
     * dependiendo de si el archivo se ha seleccionado o no.
     * */
    public void updateOptionsVisibility() {
        addButton.setVisible(isFileChosen);
        endButton.setVisible(isFileChosen);
        ignoreButton.setVisible(isFileChosen);
        ignoreOnceButton.setVisible(isFileChosen);
        methodToggleButton.setVisible(isFileChosen);
        replaceButton.setVisible(isFileChosen);
        wordLabel.setVisible(isFileChosen);
        optionsLabel.setVisible(isFileChosen);
        methodLabel.setVisible(isFileChosen);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        checkerViewPanel = new javax.swing.JPanel();
        scrollPane = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        optionsPanel = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        ignoreOnceButton = new javax.swing.JButton();
        ignoreButton = new javax.swing.JButton();
        replaceButton = new javax.swing.JButton();
        endButton = new javax.swing.JButton();
        methodToggleButton = new javax.swing.JToggleButton();
        methodLabel = new javax.swing.JLabel();
        optionsLabel = new javax.swing.JLabel();
        textLabel = new javax.swing.JLabel();
        wordLabel = new javax.swing.JLabel();
        chooseFileButton = new javax.swing.JButton();
        title = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textArea.setEditable(false);
        textArea.setBackground(new java.awt.Color(51, 51, 51));
        textArea.setColumns(20);
        textArea.setFont(new java.awt.Font("Mulish", 0, 13)); // NOI18N
        textArea.setForeground(new java.awt.Color(255, 255, 255));
        textArea.setRows(5);
        textArea.setWrapStyleWord(true);
        textArea.setEnabled(false);
        textArea.setFocusable(false);
        textArea.setRequestFocusEnabled(false);
        scrollPane.setViewportView(textArea);

        addButton.setBackground(new java.awt.Color(16, 107, 196));
        addButton.setFont(new java.awt.Font("Mulish", 1, 12)); // NOI18N
        addButton.setForeground(new java.awt.Color(255, 255, 255));
        addButton.setText("Agregar");
        addButton.setBorderPainted(false);
        addButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addButton.setFocusPainted(false);
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        ignoreOnceButton.setBackground(new java.awt.Color(16, 107, 196));
        ignoreOnceButton.setFont(new java.awt.Font("Mulish", 1, 12)); // NOI18N
        ignoreOnceButton.setForeground(new java.awt.Color(255, 255, 255));
        ignoreOnceButton.setText("Ignorar esta vez");
        ignoreOnceButton.setBorderPainted(false);
        ignoreOnceButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ignoreOnceButton.setFocusPainted(false);
        ignoreOnceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ignoreOnceButtonActionPerformed(evt);
            }
        });

        ignoreButton.setBackground(new java.awt.Color(16, 107, 196));
        ignoreButton.setFont(new java.awt.Font("Mulish", 1, 12)); // NOI18N
        ignoreButton.setForeground(new java.awt.Color(255, 255, 255));
        ignoreButton.setText("Ignorar");
        ignoreButton.setBorderPainted(false);
        ignoreButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ignoreButton.setFocusPainted(false);
        ignoreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ignoreButtonActionPerformed(evt);
            }
        });

        replaceButton.setBackground(new java.awt.Color(16, 107, 196));
        replaceButton.setFont(new java.awt.Font("Mulish", 1, 12)); // NOI18N
        replaceButton.setForeground(new java.awt.Color(255, 255, 255));
        replaceButton.setText("Sustituir");
        replaceButton.setBorderPainted(false);
        replaceButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        replaceButton.setFocusPainted(false);
        replaceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                replaceButtonActionPerformed(evt);
            }
        });

        endButton.setBackground(new java.awt.Color(16, 107, 196));
        endButton.setFont(new java.awt.Font("Mulish", 1, 12)); // NOI18N
        endButton.setForeground(new java.awt.Color(255, 255, 255));
        endButton.setText("Terminar");
        endButton.setBorderPainted(false);
        endButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        endButton.setFocusPainted(false);
        endButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endButtonActionPerformed(evt);
            }
        });

        methodToggleButton.setBackground(new java.awt.Color(16, 107, 196));
        methodToggleButton.setFont(new java.awt.Font("Mulish", 1, 12)); // NOI18N
        methodToggleButton.setForeground(new java.awt.Color(255, 255, 255));
        methodToggleButton.setText("Binaria");
        methodToggleButton.setBorderPainted(false);
        methodToggleButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        methodToggleButton.setFocusPainted(false);
        methodToggleButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                methodToggleButtonStateChanged(evt);
            }
        });

        methodLabel.setFont(new java.awt.Font("Mulish", 1, 16)); // NOI18N
        methodLabel.setText("Método: ");

        optionsLabel.setFont(new java.awt.Font("Mulish", 1, 16)); // NOI18N
        optionsLabel.setText("Opciones: ");

        textLabel.setBackground(new java.awt.Color(224, 224, 224));
        textLabel.setFont(new java.awt.Font("Mulish", 0, 15)); // NOI18N
        textLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        textLabel.setText(missingWord);

        wordLabel.setFont(new java.awt.Font("Mulish", 1, 16)); // NOI18N
        wordLabel.setText("Palabra Errónea:");

        javax.swing.GroupLayout optionsPanelLayout = new javax.swing.GroupLayout(optionsPanel);
        optionsPanel.setLayout(optionsPanelLayout);
        optionsPanelLayout.setHorizontalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsPanelLayout.createSequentialGroup()
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(optionsPanelLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(replaceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ignoreButton, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(endButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ignoreOnceButton, javax.swing.GroupLayout.Alignment.LEADING))))
                    .addGroup(optionsPanelLayout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(textLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(optionsPanelLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(optionsLabel)
                            .addGroup(optionsPanelLayout.createSequentialGroup()
                                .addComponent(methodLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(methodToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(wordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        optionsPanelLayout.setVerticalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsPanelLayout.createSequentialGroup()
                .addComponent(wordLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(methodLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(methodToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(optionsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(replaceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(ignoreButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(ignoreOnceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(endButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(54, Short.MAX_VALUE))
        );

        chooseFileButton.setBackground(new java.awt.Color(16, 107, 196));
        chooseFileButton.setFont(new java.awt.Font("Mulish", 1, 12)); // NOI18N
        chooseFileButton.setForeground(new java.awt.Color(255, 255, 255));
        chooseFileButton.setText("Seleccionar Archivo");
        chooseFileButton.setBorderPainted(false);
        chooseFileButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chooseFileButton.setFocusPainted(false);
        chooseFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseFileButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout checkerViewPanelLayout = new javax.swing.GroupLayout(checkerViewPanel);
        checkerViewPanel.setLayout(checkerViewPanelLayout);
        checkerViewPanelLayout.setHorizontalGroup(
            checkerViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(checkerViewPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(checkerViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chooseFileButton)
                    .addGroup(checkerViewPanelLayout.createSequentialGroup()
                        .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(optionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(25, 25, 25))
        );
        checkerViewPanelLayout.setVerticalGroup(
            checkerViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(checkerViewPanelLayout.createSequentialGroup()
                .addGroup(checkerViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(checkerViewPanelLayout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addComponent(optionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, checkerViewPanelLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(chooseFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 526, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(22, 22, 22))
        );

        title.setFont(new java.awt.Font("Lato", 1, 48)); // NOI18N
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setIcon(new javax.swing.ImageIcon(getClass().getResource("/title.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(checkerViewPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkerViewPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Este evento muestra el contenido del archivo de texto que selecciono
     * el usuario en el JTextArea y empieza a correr la primera revisión.
     * */
    private void chooseFileButtonActionPerformed(java.awt.event.ActionEvent evt) {
        String fileTextContent = FileManager.readTextFile(checkerViewPanel);
        /* Si no se lee un archivo se reinicia la app */
        if (fileTextContent.equals("")){
            resetAll();
            return;
        }
        textArea.setText(fileTextContent);
        nextSearch();
        updateOptionsVisibility();
    }

    /**
     * Este evento cambia entre los métodos de búsqueda.
     * */
    private void methodToggleButtonStateChanged(javax.swing.event.ChangeEvent evt) {
        if (methodToggleButton.isSelected()) {
            SearchingMethods.setMethodName(MethodName.HASHING);
            methodToggleButton.setText("Hashing");
        } else {
            SearchingMethods.setMethodName(MethodName.BINARY_SEARCH);
            methodToggleButton.setText("Binaria");
        }
    }

    /**
     * Este evento agrega la palabra marcada como errónea al diccionario
     * salta a la siguiente palabra y aumenta el contador de palabras añadidas.
     * */
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {
        spellChecker.addWord(missingWord);
        nextSearch();
        addedWordsCounter++;
    }

    /**
     * Este evento no realiza nada a la palabra errónea y salta a la siguiente.
     * */
    private void ignoreOnceButtonActionPerformed(java.awt.event.ActionEvent evt) {
        nextSearch();
    }

    /**
     * Este evento agrega la palabra a la lista de palabras ignoradas para que ya no se
     * vuelva a marcar, aumenta el contador de palabras ignoradas y continua con la
     * búsqueda.
     * */
    private void ignoreButtonActionPerformed(java.awt.event.ActionEvent evt) {
        spellChecker.addAsOmitted(missingWord);
        nextSearch();
        omittedWordsCounter++;
    }

    /**
     * Este evento muestra el JDialog previamente comentado,
     * para asi reemplazar la palabra.
    * */
    private void replaceButtonActionPerformed(java.awt.event.ActionEvent evt) {
        replaceModal.updateLabelContent();
        replaceModal.setVisible(true);
    }

    /**
     * Este evento termina la revisión del archivo, guardando los cambios realizados
     * en uno nuevo, actualizando archivo del diccionario, mostrando un mensaje con
     * la cantidad de operaciones realizadas y el número de palabras que contiene el
     * archivo.
     * */
    private void endButtonActionPerformed(java.awt.event.ActionEvent evt) {
        StringBuilder messageContent = new StringBuilder();
        spellChecker.saveDictionary();
        String text = textArea.getText();
        /* Se escribe el archivo corregido */
        FileManager.updateFileContent(text);
        messageContent.append("Número de palabras: ").append(spellChecker.countWords(text)).append("\n").
                append("Palabras omitidas: ").append(omittedWordsCounter).append("\n").
                append("Palabras añadidas: ").append(addedWordsCounter).append("\n").
                append("Palabras reemplazadas: ").append(replacedWordsCounter).append("\n");
        /* Se muestra la información del análisis en un mensaje */
        JOptionPane.showMessageDialog(this, messageContent, "Información Final", JOptionPane.INFORMATION_MESSAGE);
        /* Se reinician las variables necesarias para volver a revisar un nuevo archivo */
        resetAll();
        updateOptionsVisibility();

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(new FlatDarkFlatIJTheme());
            UIManager.put("Button.arc", 150);
            UIManager.put("TextComponent.arc", 15);
            UIManager.put("Component.focusWidth", 0);
            UIManager.put("Component.arc", 9999);
            UIManager.put("TextArea.background", Color.decode("#333333"));
            UIManager.put("Component.borderWidth", 0);
            UIManager.put("TextArea.foreground", Color.decode("#FFFFFF"));

        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        java.awt.EventQueue.invokeLater(() -> {
            new MainFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JPanel checkerViewPanel;
    private javax.swing.JButton chooseFileButton;
    private javax.swing.JButton endButton;
    private javax.swing.JButton ignoreButton;
    private javax.swing.JButton ignoreOnceButton;
    private javax.swing.JLabel methodLabel;
    private javax.swing.JToggleButton methodToggleButton;
    private javax.swing.JLabel optionsLabel;
    private javax.swing.JPanel optionsPanel;
    private javax.swing.JButton replaceButton;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTextArea textArea;
    private javax.swing.JLabel textLabel;
    private javax.swing.JLabel title;
    private javax.swing.JLabel wordLabel;
    // End of variables declaration//GEN-END:variables

}
